{
    "announcement": {
        "show": false,
        "text": "New questions added!"
    },
    "quizzes": [
        {
            "answer": {
                "explanation": "The bracket operator translates to simple pointer addition. Addition is commutative, so '*(arr + 3)' is the same as '*(3 + arr)'.",
                "id": 1
            },
            "code": "#include <iostream>\n\nint main(){\n\tint arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    std::cout << 3[arr];\n}",
            "options": [
                {
                    "id": 0,
                    "option": "3"
                },
                {
                    "id": 1,
                    "option": "4"
                },
                {
                    "id": 2,
                    "option": "segmentation fault"
                },
                {
                    "id": 3,
                    "option": "syntax error"
                }
            ],
            "question": "What is the output of the following code?"
        },
        {
            "answer": {
                "explanation": "The correct type is 'unsigned char(*arr2)[5]'.",
                "id": 3
            },
            "code": "#include <iostream>\n\nint main(){\n\tunsigned char arr[3][4][5] = {0};\n\tunsigned char **arr2 = arr[2];\n    std::cout << (arr2[0][1] == arr[2][0][1]);\n}",
            "options": [
                {
                    "id": 0,
                    "option": "0"
                },
                {
                    "id": 1,
                    "option": "1"
                },
                {
                    "id": 2,
                    "option": "segmentation fault"
                },
                {
                    "id": 3,
                    "option": "compile time error"
                }
            ],
            "question": "What is the output of the following code?"
        },
        {
            "answer": {
                "explanation": "'const' type qualifier on return type has no effect for primitive types.",
                "id": 1
            },
            "code": "#include <iostream>\n\nvoid print(int &x)        { std::cout << 1; }\nvoid print(int &&x)       { std::cout << 2; }\nvoid print(const int &x)  { std::cout << 3; }\nvoid print(const int &&x) { std::cout << 4; }\n\nint main(){\n    int a = 3;\n    print((const int)a);\n    print((const int)1);\n    print(4);\n}",
            "options": [
                {
                    "id": 0,
                    "option": "342"
                },
                {
                    "id": 1,
                    "option": "222"
                },
                {
                    "id": 2,
                    "option": "314"
                },
                {
                    "id": 3,
                    "option": "334"
                }
            ],
            "question": "What is the output of the following code?"
        },
        {
            "answer": {
                "explanation": "The expression unfolds to -(-3 -(-14 - (-1 - (-5 - (-9)))))",
                "id": 1
            },
            "code": "#include <iostream>\n\nauto sub(auto... args) { return -(-args - ...); }\n\nint main(){\n\tstd::cout << sub(3, 14, 1, 5, 9);\n}\n",
            "options": [
                {
                    "id": 0,
                    "option": "-2"
                },
                {
                    "id": 1,
                    "option": "-6"
                },
                {
                    "id": 2,
                    "option": "-26"
                },
                {
                    "id": 3,
                    "option": "6"
                }
            ],
            "question": "What is the output of the following code?"
        },
        {
            "answer": {
                "explanation": "The string \"Pie\" has an implicit null terminator, making it 4 characters long. However, the array is only 3 characters long.",
                "id": 3
            },
            "code": "#include <iostream>\n\nint main(){\n\tchar str[3] = \"Pie\";\n\tstd::cout << str;\n}",
            "options": [
                {
                    "id": 0,
                    "option": "\"Pie\""
                },
                {
                    "id": 1,
                    "option": "garbage value"
                },
                {
                    "id": 2,
                    "option": "segmentation fault"
                },
                {
                    "id": 3,
                    "option": "compile time error"
                }
            ],
            "question": "What is the output of the following code?"
        },
        {
            "answer": {
                "explanation": "Bool increment got removed in C++17.",
                "id": 3
            },
            "code": "#include <iostream>\n\nint main(){\n\tbool b = true;\n\tstd::cout << ++b;\n}",
            "options": [
                {
                    "id": 0,
                    "option": "0"
                },
                {
                    "id": 1,
                    "option": "1"
                },
                {
                    "id": 2,
                    "option": "2"
                },
                {
                    "id": 3,
                    "option": "compile time error"
                }
            ],
            "question": "What is the output of the following code?"
        },
        {
            "answer": {
                "explanation": "Lambdas, scopes, scopes inside lambdas, and lambdas inside scopes!",
                "id": 0
            },
            "code": "int main(){\n\t;\n\t{}\n\t{};\n\t[]{};\n\t[](){};\n\t[](){}();\n\t{{}[]{};};\n\t{}{}{}{}{}\n\t[](){{}}();\n\t{{}[](){}();};\n\t[](){{};{}{};}();\n}",
            "options": [
                {
                    "id": 0,
                    "option": "yes"
                },
                {
                    "id": 1,
                    "option": "no"
                },
                {
                    "id": 2,
                    "option": "wtf"
                }
            ],
            "question": "Does the following code compile?"
        },
        {
            "answer": {
                "explanation": "There is no such function such as \"std::string::compare(std::string, std::string)\"",
                "id": 3
            },
            "code": "#include <iostream>\n#include <string>\n\nint main(){\n    using std::operator\"\"s;\n    const auto s1 = \"Hello\"s;\n    const auto s2 = \"World\"s;\n    std::cout << (std::string::compare(s1, s2) == s1.compare(s2));\n}\n",
            "options": [
                {
                    "id": 0,
                    "option": "15"
                },
                {
                    "id": 1,
                    "option": "0"
                },
                {
                    "id": 2,
                    "option": "1"
                },
                {
                    "id": 3,
                    "option": "Compile Time Error"
                }
            ],
            "question": "What is the output of the following code?"
        },
        {
            "answer": {
                "explanation": "Can't specify template parameters without explicity calling \".operator()\".",
                "id": 2
            },
            "code": "int main(){\n    [a = 0]<typename T>(T) mutable { return ++a; }<int>(0);\n    [a = 0]<typename T>(T) mutable { return ++a; }.operator()<int>({});\n    [a = 0]<typename T>(T) mutable { return ++a; }.template operator()<int>({});\n}\n",
            "options": [
                {
                    "id": 0,
                    "option": "Yes. It's fine."
                },
                {
                    "id": 1,
                    "option": "Yes, but it's undefined behavior"
                },
                {
                    "id": 2,
                    "option": "No."
                },
                {
                    "id": 3,
                    "option": "I don't know..."
                }
            ],
            "question": "Does the following code compile?"
        },
        {
            "answer": {
                "explanation": "Signed integer overflow is undefined behavior.",
                "id": 3
            },
            "code": "#include <iostream>\n\nstruct Bit{\n    int b : 2 = 1;\n};\n\nint main(){\n\tBit bit;\n    std::cout << ++bit.b;\n}\n",
            "options": [
                {
                    "id": 0,
                    "option": "prints -1"
                },
                {
                    "id": 1,
                    "option": "prints -2"
                },
                {
                    "id": 2,
                    "option": "Cause a Syntax Error"
                },
                {
                    "id": 3,
                    "option": "Cause Undefined Behavior "
                }
            ],
            "question": "What is the expected bahaviour of the following code?"
        }
    ],
    "splashText": {
        "body": "With every new version, C++ becomes more and more complex. The features that are added to the language are not always intuitive, and sometime it becomes hard to keep track of what does what and why certain things happen. Let's test your knowledge of C++ with this 'simple' quiz!\n\nP.S: Assume C++20 - Clang++ v15.0.0",
        "title": "C++ is Hard!"
    }
}
